-- MySQL Script generated by MySQL Workbench
-- Fri Feb 21 05:48:25 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

-- Use default database
SET search_path TO project, public;

-- Table: roles
CREATE TABLE IF NOT EXISTS roles (
    role_id SERIAL PRIMARY KEY,
    created_at TIMESTAMP,
    created_by INTEGER,
    updated_at TIMESTAMP,
    updated_by INTEGER,
    deleted_at TIMESTAMP,
    deleted_by INTEGER,
    role_name VARCHAR(256) NOT NULL UNIQUE,
    redirect VARCHAR(512) NOT NULL DEFAULT '/' CHECK (redirect <> '')
);
CREATE INDEX roles_created_by ON roles (created_by);
CREATE INDEX roles_updated_by ON roles (updated_by);
CREATE INDEX roles_deleted_by ON roles (deleted_by);
COMMENT ON TABLE roles IS 'Role yang dapat dimiliki oleh user';

-- Table: users
CREATE TABLE IF NOT EXISTS users (
    user_id SERIAL PRIMARY KEY,
    created_at TIMESTAMP NOT NULL,
    created_by INTEGER NOT NULL,
    updated_at TIMESTAMP,
    updated_by INTEGER,
    deleted_at TIMESTAMP,
    deleted_by INTEGER,
    user_email VARCHAR(256) NOT NULL,
    user_username VARCHAR(64) NOT NULL UNIQUE,
    user_password VARCHAR(64) NOT NULL,
    user_fullname VARCHAR(256) NOT NULL,
    -- user_phone VARCHAR(20),
    user_status VARCHAR(10) NOT NULL DEFAULT 'ENABLE' CHECK (user_status IN ('ENABLE', 'DISABLE')),
    role_id INTEGER NOT NULL,
    CONSTRAINT users_role_id
        FOREIGN KEY (role_id)
        REFERENCES roles (role_id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE
);
CREATE INDEX users_role_id ON users (role_id);
COMMENT ON TABLE users IS 'Semua user yang terdaftar';

ALTER TABLE roles
  ADD CONSTRAINT roles_created_by
  FOREIGN KEY (created_by)
  REFERENCES users (user_id)
  ON DELETE RESTRICT
  ON UPDATE CASCADE;
ALTER TABLE roles
  ADD CONSTRAINT roles_updated_by
  FOREIGN KEY (updated_by)
  REFERENCES users (user_id)
  ON DELETE RESTRICT
  ON UPDATE CASCADE;
ALTER TABLE roles
  ADD CONSTRAINT roles_deleted_by
  FOREIGN KEY (deleted_by)
  REFERENCES users (user_id)
  ON DELETE RESTRICT
  ON UPDATE CASCADE;

-- Table: sessions
CREATE TABLE IF NOT EXISTS sessions (
    session_id BIGSERIAL PRIMARY KEY,
    session_created TIMESTAMP NOT NULL,
    session_expired TIMESTAMP NOT NULL,
    session_token VARCHAR(120) NOT NULL UNIQUE,
    session_device TEXT NOT NULL,
    session_ip VARCHAR(64) NOT NULL,
    session_valid VARCHAR(10) NOT NULL CHECK (session_valid IN ('AKTIF', 'TIDAK')),
    user_id INTEGER NOT NULL,
    CONSTRAINT sessions_user_id
        FOREIGN KEY (user_id)
        REFERENCES users (user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);
CREATE INDEX sessions_user_id ON sessions (user_id);
COMMENT ON TABLE sessions IS 'Session yang sedang aktif dari user';

-- Table: permissions
CREATE TABLE IF NOT EXISTS permissions (
    permission_id SERIAL PRIMARY KEY,
    permission_name VARCHAR(64) NOT NULL UNIQUE,
    permission_description TEXT NOT NULL
);
COMMENT ON TABLE permissions IS 'Permission yang tersedia pada aplikasi';

-- Table: role_permission
CREATE TABLE IF NOT EXISTS role_permission (
    role_permission_id SERIAL PRIMARY KEY,
    permit_create VARCHAR(10) NOT NULL DEFAULT 'DISABLE' CHECK (permit_create IN ('ENABLE', 'DISABLE')),
    permit_read VARCHAR(10) NOT NULL DEFAULT 'DISABLE' CHECK (permit_read IN ('ENABLE', 'DISABLE')),
    permit_update VARCHAR(10) NOT NULL DEFAULT 'DISABLE' CHECK (permit_update IN ('ENABLE', 'DISABLE')),
    permit_delete VARCHAR(10) NOT NULL DEFAULT 'DISABLE' CHECK (permit_delete IN ('ENABLE', 'DISABLE')),
    role_id INTEGER NOT NULL,
    permission_id INTEGER NOT NULL,
    CONSTRAINT rolep_role_id
        FOREIGN KEY (role_id)
        REFERENCES roles (role_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    CONSTRAINT rolep_permission_id
        FOREIGN KEY (permission_id)
        REFERENCES permissions (permission_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);
CREATE INDEX rolep_role_id ON role_permission (role_id);
CREATE INDEX rolep_permission_id ON role_permission (permission_id);
COMMENT ON TABLE role_permission IS 'Menampung semua permission yang di miliki oleh role';

-- Table: activity_logs
CREATE TABLE IF NOT EXISTS activity_logs (
    activity_id BIGSERIAL PRIMARY KEY,
    activity_created TIMESTAMP NOT NULL,
    activity_label VARCHAR(256) NOT NULL,
    activity_description TEXT NOT NULL,
    session_id BIGINT NOT NULL,
    CONSTRAINT activityl_session_id
        FOREIGN KEY (session_id)
        REFERENCES sessions (session_id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE
);
CREATE INDEX activityl_session_id ON activity_logs (session_id);
COMMENT ON TABLE activity_logs IS 'Menampung semua aktivitas dari user berdasarkan session yang sedang digunakan';
